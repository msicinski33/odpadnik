
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  position: 'position',
  phone: 'phone',
  email: 'email',
  hiredAt: 'hiredAt',
  terminatedAt: 'terminatedAt',
  notes: 'notes',
  hasDisabilityCertificate: 'hasDisabilityCertificate'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  brand: 'brand',
  registrationNumber: 'registrationNumber',
  vehicleType: 'vehicleType',
  capacity: 'capacity',
  fuelType: 'fuelType',
  purchaseDate: 'purchaseDate',
  isActive: 'isActive',
  faultStatus: 'faultStatus'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unitName: 'unitName',
  notes: 'notes'
};

exports.Prisma.FractionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  color: 'color'
};

exports.Prisma.PointScalarFieldEnum = {
  id: 'id',
  type: 'type',
  town: 'town',
  street: 'street',
  number: 'number',
  notes: 'notes',
  companyName: 'companyName',
  activityNotes: 'activityNotes',
  startDate: 'startDate',
  endDate: 'endDate',
  isIndefinite: 'isIndefinite',
  kompostownik: 'kompostownik',
  regionId: 'regionId'
};

exports.Prisma.PointFractionScalarFieldEnum = {
  id: 'id',
  pointId: 'pointId',
  fractionId: 'fractionId',
  containerSize: 'containerSize',
  pickupFrequency: 'pickupFrequency'
};

exports.Prisma.EmployeeScheduleScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  shift: 'shift',
  customHours: 'customHours',
  colorCode: 'colorCode'
};

exports.Prisma.RegionFractionScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  fractionId: 'fractionId'
};

exports.Prisma.CalendarEntryScalarFieldEnum = {
  id: 'id',
  regionId: 'regionId',
  fractionId: 'fractionId',
  date: 'date'
};

exports.Prisma.DailyAssignmentScalarFieldEnum = {
  id: 'id',
  date: 'date',
  regionId: 'regionId',
  vehicleId: 'vehicleId',
  driverId: 'driverId',
  type: 'type',
  shift: 'shift',
  municipalityId: 'municipalityId',
  equipment: 'equipment',
  workType: 'workType'
};

exports.Prisma.DailyAssignmentAssistantScalarFieldEnum = {
  id: 'id',
  dailyAssignmentId: 'dailyAssignmentId',
  employeeId: 'employeeId'
};

exports.Prisma.DailyAssignmentFractionScalarFieldEnum = {
  id: 'id',
  dailyAssignmentId: 'dailyAssignmentId',
  fractionId: 'fractionId'
};

exports.Prisma.VehicleFaultReportScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  reportedBy: 'reportedBy',
  description: 'description',
  reportedAt: 'reportedAt',
  resolvedAt: 'resolvedAt',
  isResolved: 'isResolved'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  id: 'id',
  type: 'type',
  dateReceived: 'dateReceived',
  realizationDate: 'realizationDate',
  quantity: 'quantity',
  orderNumber: 'orderNumber',
  bagNumber: 'bagNumber',
  executionDate: 'executionDate',
  receivedBy: 'receivedBy',
  address: 'address',
  municipality: 'municipality',
  company: 'company',
  wasteType: 'wasteType',
  rodzaj: 'rodzaj',
  kontener: 'kontener',
  description: 'description',
  notes: 'notes',
  failureReason: 'failureReason',
  vehicle: 'vehicle',
  responsible: 'responsible',
  completed: 'completed',
  zlecenie: 'zlecenie'
};

exports.Prisma.MunicipalityScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RodzajAbsencjiScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  color: 'color',
  notes: 'notes'
};

exports.Prisma.WorkCardEntryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  actualFrom: 'actualFrom',
  actualTo: 'actualTo',
  actualTotal: 'actualTotal',
  absenceTypeId: 'absenceTypeId',
  onCall: 'onCall',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  contractNumber: 'contractNumber',
  parties: 'parties',
  description: 'description',
  tags: 'tags',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt'
};

exports.Prisma.DocumentAttachmentScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.DocumentAnnotationScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  userId: 'userId',
  type: 'type',
  page: 'page',
  x: 'x',
  y: 'y',
  width: 'width',
  height: 'height',
  content: 'content',
  color: 'color',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.DailyAssignmentType = exports.$Enums.DailyAssignmentType = {
  bezpylne: 'bezpylne',
  sprzątanie: 'sprzątanie'
};

exports.Prisma.ModelName = {
  User: 'User',
  Employee: 'Employee',
  Vehicle: 'Vehicle',
  Region: 'Region',
  Fraction: 'Fraction',
  Point: 'Point',
  PointFraction: 'PointFraction',
  EmployeeSchedule: 'EmployeeSchedule',
  RegionFraction: 'RegionFraction',
  CalendarEntry: 'CalendarEntry',
  DailyAssignment: 'DailyAssignment',
  DailyAssignmentAssistant: 'DailyAssignmentAssistant',
  DailyAssignmentFraction: 'DailyAssignmentFraction',
  VehicleFaultReport: 'VehicleFaultReport',
  WorkOrder: 'WorkOrder',
  Municipality: 'Municipality',
  RodzajAbsencji: 'RodzajAbsencji',
  WorkCardEntry: 'WorkCardEntry',
  Document: 'Document',
  DocumentAttachment: 'DocumentAttachment',
  DocumentAnnotation: 'DocumentAnnotation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
